{"ast":null,"code":"import _defineProperty from \"E:/project/react/react-todo/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _slicedToArray from \"E:/project/react/react-todo/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport { formatMuiErrorMessage as _formatMuiErrorMessage } from \"@mui/utils\";\nvar _excluded = [\"colorSchemes\", \"components\", \"cssVarPrefix\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { deepmerge } from '@mui/utils';\nimport { GlobalStyles } from '@mui/styled-engine';\nimport cssVarsParser from './cssVarsParser';\nimport ThemeProvider from '../ThemeProvider';\nimport systemGetInitColorSchemeScript, { DEFAULT_ATTRIBUTE, DEFAULT_COLOR_SCHEME_STORAGE_KEY, DEFAULT_MODE_STORAGE_KEY } from './getInitColorSchemeScript';\nimport useCurrentColorScheme from './useCurrentColorScheme';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport var DISABLE_CSS_TRANSITION = '*{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}';\nexport default function createCssVarsProvider(options) {\n  var _options$theme = options.theme,\n      defaultTheme = _options$theme === void 0 ? {} : _options$theme,\n      _options$attribute = options.attribute,\n      defaultAttribute = _options$attribute === void 0 ? DEFAULT_ATTRIBUTE : _options$attribute,\n      _options$modeStorageK = options.modeStorageKey,\n      defaultModeStorageKey = _options$modeStorageK === void 0 ? DEFAULT_MODE_STORAGE_KEY : _options$modeStorageK,\n      _options$colorSchemeS = options.colorSchemeStorageKey,\n      defaultColorSchemeStorageKey = _options$colorSchemeS === void 0 ? DEFAULT_COLOR_SCHEME_STORAGE_KEY : _options$colorSchemeS,\n      _options$defaultMode = options.defaultMode,\n      designSystemMode = _options$defaultMode === void 0 ? 'light' : _options$defaultMode,\n      designSystemColorScheme = options.defaultColorScheme,\n      _options$disableTrans = options.disableTransitionOnChange,\n      designSystemTransitionOnChange = _options$disableTrans === void 0 ? false : _options$disableTrans,\n      designSystemShouldSkipGeneratingVar = options.shouldSkipGeneratingVar,\n      resolveTheme = options.resolveTheme,\n      excludeVariablesFromRoot = options.excludeVariablesFromRoot;\n\n  if (!defaultTheme.colorSchemes || typeof designSystemColorScheme === 'string' && !defaultTheme.colorSchemes[designSystemColorScheme] || typeof designSystemColorScheme === 'object' && !defaultTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.light] || typeof designSystemColorScheme === 'object' && !defaultTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.dark]) {\n    console.error(\"MUI: `\".concat(designSystemColorScheme, \"` does not exist in `theme.colorSchemes`.\"));\n  }\n\n  var ColorSchemeContext = /*#__PURE__*/React.createContext(undefined);\n\n  var useColorScheme = function useColorScheme() {\n    var value = React.useContext(ColorSchemeContext);\n\n    if (!value) {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? \"MUI: `useColorScheme` must be called under <CssVarsProvider />\" : _formatMuiErrorMessage(19));\n    }\n\n    return value;\n  };\n\n  function CssVarsProvider(_ref) {\n    var children = _ref.children,\n        _ref$theme = _ref.theme,\n        themeProp = _ref$theme === void 0 ? defaultTheme : _ref$theme,\n        _ref$modeStorageKey = _ref.modeStorageKey,\n        modeStorageKey = _ref$modeStorageKey === void 0 ? defaultModeStorageKey : _ref$modeStorageKey,\n        _ref$colorSchemeStora = _ref.colorSchemeStorageKey,\n        colorSchemeStorageKey = _ref$colorSchemeStora === void 0 ? defaultColorSchemeStorageKey : _ref$colorSchemeStora,\n        _ref$attribute = _ref.attribute,\n        attribute = _ref$attribute === void 0 ? defaultAttribute : _ref$attribute,\n        _ref$defaultMode = _ref.defaultMode,\n        defaultMode = _ref$defaultMode === void 0 ? designSystemMode : _ref$defaultMode,\n        _ref$defaultColorSche = _ref.defaultColorScheme,\n        defaultColorScheme = _ref$defaultColorSche === void 0 ? designSystemColorScheme : _ref$defaultColorSche,\n        _ref$disableTransitio = _ref.disableTransitionOnChange,\n        disableTransitionOnChange = _ref$disableTransitio === void 0 ? designSystemTransitionOnChange : _ref$disableTransitio,\n        _ref$storageWindow = _ref.storageWindow,\n        storageWindow = _ref$storageWindow === void 0 ? typeof window === 'undefined' ? undefined : window : _ref$storageWindow,\n        _ref$documentNode = _ref.documentNode,\n        documentNode = _ref$documentNode === void 0 ? typeof document === 'undefined' ? undefined : document : _ref$documentNode,\n        _ref$colorSchemeNode = _ref.colorSchemeNode,\n        colorSchemeNode = _ref$colorSchemeNode === void 0 ? typeof document === 'undefined' ? undefined : document.documentElement : _ref$colorSchemeNode,\n        _ref$colorSchemeSelec = _ref.colorSchemeSelector,\n        colorSchemeSelector = _ref$colorSchemeSelec === void 0 ? ':root' : _ref$colorSchemeSelec,\n        _ref$shouldSkipGenera = _ref.shouldSkipGeneratingVar,\n        shouldSkipGeneratingVar = _ref$shouldSkipGenera === void 0 ? designSystemShouldSkipGeneratingVar : _ref$shouldSkipGenera;\n    var hasMounted = React.useRef(false);\n\n    var _themeProp$colorSchem = themeProp.colorSchemes,\n        colorSchemes = _themeProp$colorSchem === void 0 ? {} : _themeProp$colorSchem,\n        _themeProp$components = themeProp.components,\n        components = _themeProp$components === void 0 ? {} : _themeProp$components,\n        cssVarPrefix = themeProp.cssVarPrefix,\n        restThemeProp = _objectWithoutPropertiesLoose(themeProp, _excluded);\n\n    var allColorSchemes = Object.keys(colorSchemes);\n    var defaultLightColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.light;\n    var defaultDarkColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.dark; // 1. Get the data about the `mode`, `colorScheme`, and setter functions.\n\n    var _useCurrentColorSchem = useCurrentColorScheme({\n      supportedColorSchemes: allColorSchemes,\n      defaultLightColorScheme: defaultLightColorScheme,\n      defaultDarkColorScheme: defaultDarkColorScheme,\n      modeStorageKey: modeStorageKey,\n      colorSchemeStorageKey: colorSchemeStorageKey,\n      defaultMode: defaultMode,\n      storageWindow: storageWindow\n    }),\n        mode = _useCurrentColorSchem.mode,\n        setMode = _useCurrentColorSchem.setMode,\n        systemMode = _useCurrentColorSchem.systemMode,\n        lightColorScheme = _useCurrentColorSchem.lightColorScheme,\n        darkColorScheme = _useCurrentColorSchem.darkColorScheme,\n        colorScheme = _useCurrentColorSchem.colorScheme,\n        setColorScheme = _useCurrentColorSchem.setColorScheme;\n\n    var calculatedMode = function () {\n      if (!mode) {\n        // This scope occurs on the server\n        if (defaultMode === 'system') {\n          return designSystemMode;\n        }\n\n        return defaultMode;\n      }\n\n      return mode;\n    }();\n\n    var calculatedColorScheme = function () {\n      if (!colorScheme) {\n        // This scope occurs on the server\n        if (calculatedMode === 'dark') {\n          return defaultDarkColorScheme;\n        } // use light color scheme, if default mode is 'light' | 'system'\n\n\n        return defaultLightColorScheme;\n      }\n\n      return colorScheme;\n    }(); // 2. Create CSS variables and store them in objects (to be generated in stylesheets in the final step)\n\n\n    var _cssVarsParser = cssVarsParser(restThemeProp, {\n      prefix: cssVarPrefix,\n      shouldSkipGeneratingVar: shouldSkipGeneratingVar\n    }),\n        rootCss = _cssVarsParser.css,\n        rootVars = _cssVarsParser.vars,\n        parsedTheme = _cssVarsParser.parsedTheme; // 3. Start composing the theme object\n\n\n    var theme = _extends({}, parsedTheme, {\n      components: components,\n      colorSchemes: colorSchemes,\n      cssVarPrefix: cssVarPrefix,\n      vars: rootVars,\n      getColorSchemeSelector: function getColorSchemeSelector(targetColorScheme) {\n        return \"[\".concat(attribute, \"=\\\"\").concat(targetColorScheme, \"\\\"] &\");\n      }\n    }); // 4. Create color CSS variables and store them in objects (to be generated in stylesheets in the final step)\n    //    The default color scheme stylesheet is constructed to have the least CSS specificity.\n    //    The other color schemes uses selector, default as data attribute, to increase the CSS specificity so that they can override the default color scheme stylesheet.\n\n\n    var defaultColorSchemeStyleSheet = {};\n    var otherColorSchemesStyleSheet = {};\n    Object.entries(colorSchemes).forEach(function (_ref2) {\n      var _ref3 = _slicedToArray(_ref2, 2),\n          key = _ref3[0],\n          scheme = _ref3[1];\n\n      var _cssVarsParser2 = cssVarsParser(scheme, {\n        prefix: cssVarPrefix,\n        shouldSkipGeneratingVar: shouldSkipGeneratingVar\n      }),\n          css = _cssVarsParser2.css,\n          vars = _cssVarsParser2.vars,\n          parsedScheme = _cssVarsParser2.parsedTheme;\n\n      theme.vars = deepmerge(theme.vars, vars);\n\n      if (key === calculatedColorScheme) {\n        // 4.1 Merge the selected color scheme to the theme\n        theme = _extends({}, theme, parsedScheme);\n\n        if (theme.palette) {\n          theme.palette.colorScheme = key;\n        }\n      }\n\n      var resolvedDefaultColorScheme = function () {\n        if (typeof defaultColorScheme === 'string') {\n          return defaultColorScheme;\n        }\n\n        if (defaultMode === 'dark') {\n          return defaultColorScheme.dark;\n        }\n\n        return defaultColorScheme.light;\n      }();\n\n      if (key === resolvedDefaultColorScheme) {\n        if (excludeVariablesFromRoot) {\n          var excludedVariables = {};\n          excludeVariablesFromRoot(cssVarPrefix).forEach(function (cssVar) {\n            excludedVariables[cssVar] = css[cssVar];\n            delete css[cssVar];\n          });\n          defaultColorSchemeStyleSheet[\"[\".concat(attribute, \"=\\\"\").concat(key, \"\\\"]\")] = excludedVariables;\n        }\n\n        defaultColorSchemeStyleSheet[\"\".concat(colorSchemeSelector, \", [\").concat(attribute, \"=\\\"\").concat(key, \"\\\"]\")] = css;\n      } else {\n        otherColorSchemesStyleSheet[\"\".concat(colorSchemeSelector === ':root' ? '' : colorSchemeSelector, \"[\").concat(attribute, \"=\\\"\").concat(key, \"\\\"]\")] = css;\n      }\n    }); // 5. Declaring effects\n    // 5.1 Updates the selector value to use the current color scheme which tells CSS to use the proper stylesheet.\n\n    React.useEffect(function () {\n      if (colorScheme && colorSchemeNode) {\n        // attaches attribute to <html> because the css variables are attached to :root (html)\n        colorSchemeNode.setAttribute(attribute, colorScheme);\n      }\n    }, [colorScheme, attribute, colorSchemeNode]); // 5.2 Remove the CSS transition when color scheme changes to create instant experience.\n    // credit: https://github.com/pacocoursey/next-themes/blob/b5c2bad50de2d61ad7b52a9c5cdc801a78507d7a/index.tsx#L313\n\n    React.useEffect(function () {\n      var timer;\n\n      if (disableTransitionOnChange && hasMounted.current && documentNode) {\n        var css = documentNode.createElement('style');\n        css.appendChild(documentNode.createTextNode(DISABLE_CSS_TRANSITION));\n        documentNode.head.appendChild(css); // Force browser repaint\n\n        (function () {\n          return window.getComputedStyle(documentNode.body);\n        })();\n\n        timer = setTimeout(function () {\n          documentNode.head.removeChild(css);\n        }, 1);\n      }\n\n      return function () {\n        clearTimeout(timer);\n      };\n    }, [colorScheme, disableTransitionOnChange, documentNode]);\n    React.useEffect(function () {\n      hasMounted.current = true;\n      return function () {\n        hasMounted.current = false;\n      };\n    }, []);\n    var contextValue = React.useMemo(function () {\n      return {\n        mode: mode,\n        systemMode: systemMode,\n        setMode: setMode,\n        lightColorScheme: lightColorScheme,\n        darkColorScheme: darkColorScheme,\n        colorScheme: colorScheme,\n        setColorScheme: setColorScheme,\n        allColorSchemes: allColorSchemes\n      };\n    }, [allColorSchemes, colorScheme, darkColorScheme, lightColorScheme, mode, setColorScheme, setMode, systemMode]);\n    return /*#__PURE__*/_jsxs(ColorSchemeContext.Provider, {\n      value: contextValue,\n      children: [/*#__PURE__*/_jsx(GlobalStyles, {\n        styles: _defineProperty({}, colorSchemeSelector, rootCss)\n      }), /*#__PURE__*/_jsx(GlobalStyles, {\n        styles: defaultColorSchemeStyleSheet\n      }), /*#__PURE__*/_jsx(GlobalStyles, {\n        styles: otherColorSchemesStyleSheet\n      }), /*#__PURE__*/_jsx(ThemeProvider, {\n        theme: resolveTheme ? resolveTheme(theme) : theme,\n        children: children\n      })]\n    });\n  }\n\n  process.env.NODE_ENV !== \"production\" ? CssVarsProvider.propTypes = {\n    /**\r\n     * The body attribute name to attach colorScheme.\r\n     */\n    attribute: PropTypes.string,\n\n    /**\r\n     * The component tree.\r\n     */\n    children: PropTypes.node,\n\n    /**\r\n     * The node used to attach the color-scheme attribute\r\n     */\n    colorSchemeNode: PropTypes.any,\n\n    /**\r\n     * The CSS selector for attaching the generated custom properties\r\n     */\n    colorSchemeSelector: PropTypes.string,\n\n    /**\r\n     * localStorage key used to store `colorScheme`\r\n     */\n    colorSchemeStorageKey: PropTypes.string,\n\n    /**\r\n     * The initial color scheme used.\r\n     */\n    defaultColorScheme: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n\n    /**\r\n     * The initial mode used.\r\n     */\n    defaultMode: PropTypes.string,\n\n    /**\r\n     * Disable CSS transitions when switching between modes or color schemes\r\n     */\n    disableTransitionOnChange: PropTypes.bool,\n\n    /**\r\n     * The document to attach the attribute to\r\n     */\n    documentNode: PropTypes.any,\n\n    /**\r\n     * The key in the local storage used to store current color scheme.\r\n     */\n    modeStorageKey: PropTypes.string,\n\n    /**\r\n     * A function to determine if the key, value should be attached as CSS Variable\r\n     */\n    shouldSkipGeneratingVar: PropTypes.func,\n\n    /**\r\n     * The window that attaches the 'storage' event listener\r\n     * @default window\r\n     */\n    storageWindow: PropTypes.any,\n\n    /**\r\n     * The calculated theme object that will be passed through context.\r\n     */\n    theme: PropTypes.object\n  } : void 0;\n  var defaultLightColorScheme = typeof designSystemColorScheme === 'string' ? designSystemColorScheme : designSystemColorScheme.light;\n  var defaultDarkColorScheme = typeof designSystemColorScheme === 'string' ? designSystemColorScheme : designSystemColorScheme.dark;\n\n  var getInitColorSchemeScript = function getInitColorSchemeScript(params) {\n    return systemGetInitColorSchemeScript(_extends({\n      attribute: defaultAttribute,\n      colorSchemeStorageKey: defaultColorSchemeStorageKey,\n      defaultMode: designSystemMode,\n      defaultLightColorScheme: defaultLightColorScheme,\n      defaultDarkColorScheme: defaultDarkColorScheme,\n      modeStorageKey: defaultModeStorageKey\n    }, params));\n  };\n\n  return {\n    CssVarsProvider: CssVarsProvider,\n    useColorScheme: useColorScheme,\n    getInitColorSchemeScript: getInitColorSchemeScript\n  };\n}","map":{"version":3,"names":["_extends","_objectWithoutPropertiesLoose","formatMuiErrorMessage","_formatMuiErrorMessage","_excluded","React","PropTypes","deepmerge","GlobalStyles","cssVarsParser","ThemeProvider","systemGetInitColorSchemeScript","DEFAULT_ATTRIBUTE","DEFAULT_COLOR_SCHEME_STORAGE_KEY","DEFAULT_MODE_STORAGE_KEY","useCurrentColorScheme","jsx","_jsx","jsxs","_jsxs","DISABLE_CSS_TRANSITION","createCssVarsProvider","options","theme","defaultTheme","attribute","defaultAttribute","modeStorageKey","defaultModeStorageKey","colorSchemeStorageKey","defaultColorSchemeStorageKey","defaultMode","designSystemMode","designSystemColorScheme","defaultColorScheme","disableTransitionOnChange","designSystemTransitionOnChange","designSystemShouldSkipGeneratingVar","shouldSkipGeneratingVar","resolveTheme","excludeVariablesFromRoot","colorSchemes","light","dark","console","error","ColorSchemeContext","createContext","undefined","useColorScheme","value","useContext","Error","process","env","NODE_ENV","CssVarsProvider","children","themeProp","storageWindow","window","documentNode","document","colorSchemeNode","documentElement","colorSchemeSelector","hasMounted","useRef","components","cssVarPrefix","restThemeProp","allColorSchemes","Object","keys","defaultLightColorScheme","defaultDarkColorScheme","supportedColorSchemes","mode","setMode","systemMode","lightColorScheme","darkColorScheme","colorScheme","setColorScheme","calculatedMode","calculatedColorScheme","prefix","rootCss","css","rootVars","vars","parsedTheme","getColorSchemeSelector","targetColorScheme","defaultColorSchemeStyleSheet","otherColorSchemesStyleSheet","entries","forEach","key","scheme","parsedScheme","palette","resolvedDefaultColorScheme","excludedVariables","cssVar","useEffect","setAttribute","timer","current","createElement","appendChild","createTextNode","head","getComputedStyle","body","setTimeout","removeChild","clearTimeout","contextValue","useMemo","Provider","styles","propTypes","string","node","any","oneOfType","object","bool","func","getInitColorSchemeScript","params"],"sources":["E:/project/react/react-todo/node_modules/@mui/system/esm/cssVars/createCssVarsProvider.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\r\nimport { formatMuiErrorMessage as _formatMuiErrorMessage } from \"@mui/utils\";\r\nconst _excluded = [\"colorSchemes\", \"components\", \"cssVarPrefix\"];\r\nimport * as React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { deepmerge } from '@mui/utils';\r\nimport { GlobalStyles } from '@mui/styled-engine';\r\nimport cssVarsParser from './cssVarsParser';\r\nimport ThemeProvider from '../ThemeProvider';\r\nimport systemGetInitColorSchemeScript, { DEFAULT_ATTRIBUTE, DEFAULT_COLOR_SCHEME_STORAGE_KEY, DEFAULT_MODE_STORAGE_KEY } from './getInitColorSchemeScript';\r\nimport useCurrentColorScheme from './useCurrentColorScheme';\r\nimport { jsx as _jsx } from \"react/jsx-runtime\";\r\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\r\nexport const DISABLE_CSS_TRANSITION = '*{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}';\r\nexport default function createCssVarsProvider(options) {\r\n  const {\r\n    theme: defaultTheme = {},\r\n    attribute: defaultAttribute = DEFAULT_ATTRIBUTE,\r\n    modeStorageKey: defaultModeStorageKey = DEFAULT_MODE_STORAGE_KEY,\r\n    colorSchemeStorageKey: defaultColorSchemeStorageKey = DEFAULT_COLOR_SCHEME_STORAGE_KEY,\r\n    defaultMode: designSystemMode = 'light',\r\n    defaultColorScheme: designSystemColorScheme,\r\n    disableTransitionOnChange: designSystemTransitionOnChange = false,\r\n    shouldSkipGeneratingVar: designSystemShouldSkipGeneratingVar,\r\n    resolveTheme,\r\n    excludeVariablesFromRoot\r\n  } = options;\r\n\r\n  if (!defaultTheme.colorSchemes || typeof designSystemColorScheme === 'string' && !defaultTheme.colorSchemes[designSystemColorScheme] || typeof designSystemColorScheme === 'object' && !defaultTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.light] || typeof designSystemColorScheme === 'object' && !defaultTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.dark]) {\r\n    console.error(`MUI: \\`${designSystemColorScheme}\\` does not exist in \\`theme.colorSchemes\\`.`);\r\n  }\r\n\r\n  const ColorSchemeContext = /*#__PURE__*/React.createContext(undefined);\r\n\r\n  const useColorScheme = () => {\r\n    const value = React.useContext(ColorSchemeContext);\r\n\r\n    if (!value) {\r\n      throw new Error(process.env.NODE_ENV !== \"production\" ? `MUI: \\`useColorScheme\\` must be called under <CssVarsProvider />` : _formatMuiErrorMessage(19));\r\n    }\r\n\r\n    return value;\r\n  };\r\n\r\n  function CssVarsProvider({\r\n    children,\r\n    theme: themeProp = defaultTheme,\r\n    modeStorageKey = defaultModeStorageKey,\r\n    colorSchemeStorageKey = defaultColorSchemeStorageKey,\r\n    attribute = defaultAttribute,\r\n    defaultMode = designSystemMode,\r\n    defaultColorScheme = designSystemColorScheme,\r\n    disableTransitionOnChange = designSystemTransitionOnChange,\r\n    storageWindow = typeof window === 'undefined' ? undefined : window,\r\n    documentNode = typeof document === 'undefined' ? undefined : document,\r\n    colorSchemeNode = typeof document === 'undefined' ? undefined : document.documentElement,\r\n    colorSchemeSelector = ':root',\r\n    shouldSkipGeneratingVar = designSystemShouldSkipGeneratingVar\r\n  }) {\r\n    const hasMounted = React.useRef(false);\r\n\r\n    const {\r\n      colorSchemes = {},\r\n      components = {},\r\n      cssVarPrefix\r\n    } = themeProp,\r\n          restThemeProp = _objectWithoutPropertiesLoose(themeProp, _excluded);\r\n\r\n    const allColorSchemes = Object.keys(colorSchemes);\r\n    const defaultLightColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.light;\r\n    const defaultDarkColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.dark; // 1. Get the data about the `mode`, `colorScheme`, and setter functions.\r\n\r\n    const {\r\n      mode,\r\n      setMode,\r\n      systemMode,\r\n      lightColorScheme,\r\n      darkColorScheme,\r\n      colorScheme,\r\n      setColorScheme\r\n    } = useCurrentColorScheme({\r\n      supportedColorSchemes: allColorSchemes,\r\n      defaultLightColorScheme,\r\n      defaultDarkColorScheme,\r\n      modeStorageKey,\r\n      colorSchemeStorageKey,\r\n      defaultMode,\r\n      storageWindow\r\n    });\r\n\r\n    const calculatedMode = (() => {\r\n      if (!mode) {\r\n        // This scope occurs on the server\r\n        if (defaultMode === 'system') {\r\n          return designSystemMode;\r\n        }\r\n\r\n        return defaultMode;\r\n      }\r\n\r\n      return mode;\r\n    })();\r\n\r\n    const calculatedColorScheme = (() => {\r\n      if (!colorScheme) {\r\n        // This scope occurs on the server\r\n        if (calculatedMode === 'dark') {\r\n          return defaultDarkColorScheme;\r\n        } // use light color scheme, if default mode is 'light' | 'system'\r\n\r\n\r\n        return defaultLightColorScheme;\r\n      }\r\n\r\n      return colorScheme;\r\n    })(); // 2. Create CSS variables and store them in objects (to be generated in stylesheets in the final step)\r\n\r\n\r\n    const {\r\n      css: rootCss,\r\n      vars: rootVars,\r\n      parsedTheme\r\n    } = cssVarsParser(restThemeProp, {\r\n      prefix: cssVarPrefix,\r\n      shouldSkipGeneratingVar\r\n    }); // 3. Start composing the theme object\r\n\r\n    let theme = _extends({}, parsedTheme, {\r\n      components,\r\n      colorSchemes,\r\n      cssVarPrefix,\r\n      vars: rootVars,\r\n      getColorSchemeSelector: targetColorScheme => `[${attribute}=\"${targetColorScheme}\"] &`\r\n    }); // 4. Create color CSS variables and store them in objects (to be generated in stylesheets in the final step)\r\n    //    The default color scheme stylesheet is constructed to have the least CSS specificity.\r\n    //    The other color schemes uses selector, default as data attribute, to increase the CSS specificity so that they can override the default color scheme stylesheet.\r\n\r\n\r\n    const defaultColorSchemeStyleSheet = {};\r\n    const otherColorSchemesStyleSheet = {};\r\n    Object.entries(colorSchemes).forEach(([key, scheme]) => {\r\n      const {\r\n        css,\r\n        vars,\r\n        parsedTheme: parsedScheme\r\n      } = cssVarsParser(scheme, {\r\n        prefix: cssVarPrefix,\r\n        shouldSkipGeneratingVar\r\n      });\r\n      theme.vars = deepmerge(theme.vars, vars);\r\n\r\n      if (key === calculatedColorScheme) {\r\n        // 4.1 Merge the selected color scheme to the theme\r\n        theme = _extends({}, theme, parsedScheme);\r\n\r\n        if (theme.palette) {\r\n          theme.palette.colorScheme = key;\r\n        }\r\n      }\r\n\r\n      const resolvedDefaultColorScheme = (() => {\r\n        if (typeof defaultColorScheme === 'string') {\r\n          return defaultColorScheme;\r\n        }\r\n\r\n        if (defaultMode === 'dark') {\r\n          return defaultColorScheme.dark;\r\n        }\r\n\r\n        return defaultColorScheme.light;\r\n      })();\r\n\r\n      if (key === resolvedDefaultColorScheme) {\r\n        if (excludeVariablesFromRoot) {\r\n          const excludedVariables = {};\r\n          excludeVariablesFromRoot(cssVarPrefix).forEach(cssVar => {\r\n            excludedVariables[cssVar] = css[cssVar];\r\n            delete css[cssVar];\r\n          });\r\n          defaultColorSchemeStyleSheet[`[${attribute}=\"${key}\"]`] = excludedVariables;\r\n        }\r\n\r\n        defaultColorSchemeStyleSheet[`${colorSchemeSelector}, [${attribute}=\"${key}\"]`] = css;\r\n      } else {\r\n        otherColorSchemesStyleSheet[`${colorSchemeSelector === ':root' ? '' : colorSchemeSelector}[${attribute}=\"${key}\"]`] = css;\r\n      }\r\n    }); // 5. Declaring effects\r\n    // 5.1 Updates the selector value to use the current color scheme which tells CSS to use the proper stylesheet.\r\n\r\n    React.useEffect(() => {\r\n      if (colorScheme && colorSchemeNode) {\r\n        // attaches attribute to <html> because the css variables are attached to :root (html)\r\n        colorSchemeNode.setAttribute(attribute, colorScheme);\r\n      }\r\n    }, [colorScheme, attribute, colorSchemeNode]); // 5.2 Remove the CSS transition when color scheme changes to create instant experience.\r\n    // credit: https://github.com/pacocoursey/next-themes/blob/b5c2bad50de2d61ad7b52a9c5cdc801a78507d7a/index.tsx#L313\r\n\r\n    React.useEffect(() => {\r\n      let timer;\r\n\r\n      if (disableTransitionOnChange && hasMounted.current && documentNode) {\r\n        const css = documentNode.createElement('style');\r\n        css.appendChild(documentNode.createTextNode(DISABLE_CSS_TRANSITION));\r\n        documentNode.head.appendChild(css); // Force browser repaint\r\n\r\n        (() => window.getComputedStyle(documentNode.body))();\r\n\r\n        timer = setTimeout(() => {\r\n          documentNode.head.removeChild(css);\r\n        }, 1);\r\n      }\r\n\r\n      return () => {\r\n        clearTimeout(timer);\r\n      };\r\n    }, [colorScheme, disableTransitionOnChange, documentNode]);\r\n    React.useEffect(() => {\r\n      hasMounted.current = true;\r\n      return () => {\r\n        hasMounted.current = false;\r\n      };\r\n    }, []);\r\n    const contextValue = React.useMemo(() => ({\r\n      mode,\r\n      systemMode,\r\n      setMode,\r\n      lightColorScheme,\r\n      darkColorScheme,\r\n      colorScheme,\r\n      setColorScheme,\r\n      allColorSchemes\r\n    }), [allColorSchemes, colorScheme, darkColorScheme, lightColorScheme, mode, setColorScheme, setMode, systemMode]);\r\n    return /*#__PURE__*/_jsxs(ColorSchemeContext.Provider, {\r\n      value: contextValue,\r\n      children: [/*#__PURE__*/_jsx(GlobalStyles, {\r\n        styles: {\r\n          [colorSchemeSelector]: rootCss\r\n        }\r\n      }), /*#__PURE__*/_jsx(GlobalStyles, {\r\n        styles: defaultColorSchemeStyleSheet\r\n      }), /*#__PURE__*/_jsx(GlobalStyles, {\r\n        styles: otherColorSchemesStyleSheet\r\n      }), /*#__PURE__*/_jsx(ThemeProvider, {\r\n        theme: resolveTheme ? resolveTheme(theme) : theme,\r\n        children: children\r\n      })]\r\n    });\r\n  }\r\n\r\n  process.env.NODE_ENV !== \"production\" ? CssVarsProvider.propTypes = {\r\n    /**\r\n     * The body attribute name to attach colorScheme.\r\n     */\r\n    attribute: PropTypes.string,\r\n\r\n    /**\r\n     * The component tree.\r\n     */\r\n    children: PropTypes.node,\r\n\r\n    /**\r\n     * The node used to attach the color-scheme attribute\r\n     */\r\n    colorSchemeNode: PropTypes.any,\r\n\r\n    /**\r\n     * The CSS selector for attaching the generated custom properties\r\n     */\r\n    colorSchemeSelector: PropTypes.string,\r\n\r\n    /**\r\n     * localStorage key used to store `colorScheme`\r\n     */\r\n    colorSchemeStorageKey: PropTypes.string,\r\n\r\n    /**\r\n     * The initial color scheme used.\r\n     */\r\n    defaultColorScheme: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\r\n\r\n    /**\r\n     * The initial mode used.\r\n     */\r\n    defaultMode: PropTypes.string,\r\n\r\n    /**\r\n     * Disable CSS transitions when switching between modes or color schemes\r\n     */\r\n    disableTransitionOnChange: PropTypes.bool,\r\n\r\n    /**\r\n     * The document to attach the attribute to\r\n     */\r\n    documentNode: PropTypes.any,\r\n\r\n    /**\r\n     * The key in the local storage used to store current color scheme.\r\n     */\r\n    modeStorageKey: PropTypes.string,\r\n\r\n    /**\r\n     * A function to determine if the key, value should be attached as CSS Variable\r\n     */\r\n    shouldSkipGeneratingVar: PropTypes.func,\r\n\r\n    /**\r\n     * The window that attaches the 'storage' event listener\r\n     * @default window\r\n     */\r\n    storageWindow: PropTypes.any,\r\n\r\n    /**\r\n     * The calculated theme object that will be passed through context.\r\n     */\r\n    theme: PropTypes.object\r\n  } : void 0;\r\n  const defaultLightColorScheme = typeof designSystemColorScheme === 'string' ? designSystemColorScheme : designSystemColorScheme.light;\r\n  const defaultDarkColorScheme = typeof designSystemColorScheme === 'string' ? designSystemColorScheme : designSystemColorScheme.dark;\r\n\r\n  const getInitColorSchemeScript = params => systemGetInitColorSchemeScript(_extends({\r\n    attribute: defaultAttribute,\r\n    colorSchemeStorageKey: defaultColorSchemeStorageKey,\r\n    defaultMode: designSystemMode,\r\n    defaultLightColorScheme,\r\n    defaultDarkColorScheme,\r\n    modeStorageKey: defaultModeStorageKey\r\n  }, params));\r\n\r\n  return {\r\n    CssVarsProvider,\r\n    useColorScheme,\r\n    getInitColorSchemeScript\r\n  };\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}