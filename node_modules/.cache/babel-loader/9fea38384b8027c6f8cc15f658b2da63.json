{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport { formatMuiErrorMessage as _formatMuiErrorMessage } from \"@mui/utils\";\nconst _excluded = [\"colorSchemes\", \"components\", \"cssVarPrefix\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { deepmerge } from '@mui/utils';\nimport { GlobalStyles } from '@mui/styled-engine';\nimport cssVarsParser from './cssVarsParser';\nimport ThemeProvider from '../ThemeProvider';\nimport systemGetInitColorSchemeScript, { DEFAULT_ATTRIBUTE, DEFAULT_COLOR_SCHEME_STORAGE_KEY, DEFAULT_MODE_STORAGE_KEY } from './getInitColorSchemeScript';\nimport useCurrentColorScheme from './useCurrentColorScheme';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const DISABLE_CSS_TRANSITION = '*{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}';\nexport default function createCssVarsProvider(options) {\n  const {\n    theme: defaultTheme = {},\n    attribute: defaultAttribute = DEFAULT_ATTRIBUTE,\n    modeStorageKey: defaultModeStorageKey = DEFAULT_MODE_STORAGE_KEY,\n    colorSchemeStorageKey: defaultColorSchemeStorageKey = DEFAULT_COLOR_SCHEME_STORAGE_KEY,\n    defaultMode: designSystemMode = 'light',\n    defaultColorScheme: designSystemColorScheme,\n    disableTransitionOnChange: designSystemTransitionOnChange = false,\n    shouldSkipGeneratingVar: designSystemShouldSkipGeneratingVar,\n    resolveTheme,\n    excludeVariablesFromRoot\n  } = options;\n\n  if (!defaultTheme.colorSchemes || typeof designSystemColorScheme === 'string' && !defaultTheme.colorSchemes[designSystemColorScheme] || typeof designSystemColorScheme === 'object' && !defaultTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.light] || typeof designSystemColorScheme === 'object' && !defaultTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.dark]) {\n    console.error(`MUI: \\`${designSystemColorScheme}\\` does not exist in \\`theme.colorSchemes\\`.`);\n  }\n\n  const ColorSchemeContext = /*#__PURE__*/React.createContext(undefined);\n\n  const useColorScheme = () => {\n    const value = React.useContext(ColorSchemeContext);\n\n    if (!value) {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? `MUI: \\`useColorScheme\\` must be called under <CssVarsProvider />` : _formatMuiErrorMessage(19));\n    }\n\n    return value;\n  };\n\n  function CssVarsProvider(_ref) {\n    let {\n      children,\n      theme: themeProp = defaultTheme,\n      modeStorageKey = defaultModeStorageKey,\n      colorSchemeStorageKey = defaultColorSchemeStorageKey,\n      attribute = defaultAttribute,\n      defaultMode = designSystemMode,\n      defaultColorScheme = designSystemColorScheme,\n      disableTransitionOnChange = designSystemTransitionOnChange,\n      storageWindow = typeof window === 'undefined' ? undefined : window,\n      documentNode = typeof document === 'undefined' ? undefined : document,\n      colorSchemeNode = typeof document === 'undefined' ? undefined : document.documentElement,\n      colorSchemeSelector = ':root',\n      shouldSkipGeneratingVar = designSystemShouldSkipGeneratingVar\n    } = _ref;\n    const hasMounted = React.useRef(false);\n\n    const {\n      colorSchemes = {},\n      components = {},\n      cssVarPrefix\n    } = themeProp,\n          restThemeProp = _objectWithoutPropertiesLoose(themeProp, _excluded);\n\n    const allColorSchemes = Object.keys(colorSchemes);\n    const defaultLightColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.light;\n    const defaultDarkColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.dark; // 1. Get the data about the `mode`, `colorScheme`, and setter functions.\n\n    const {\n      mode,\n      setMode,\n      systemMode,\n      lightColorScheme,\n      darkColorScheme,\n      colorScheme,\n      setColorScheme\n    } = useCurrentColorScheme({\n      supportedColorSchemes: allColorSchemes,\n      defaultLightColorScheme,\n      defaultDarkColorScheme,\n      modeStorageKey,\n      colorSchemeStorageKey,\n      defaultMode,\n      storageWindow\n    });\n\n    const calculatedMode = (() => {\n      if (!mode) {\n        // This scope occurs on the server\n        if (defaultMode === 'system') {\n          return designSystemMode;\n        }\n\n        return defaultMode;\n      }\n\n      return mode;\n    })();\n\n    const calculatedColorScheme = (() => {\n      if (!colorScheme) {\n        // This scope occurs on the server\n        if (calculatedMode === 'dark') {\n          return defaultDarkColorScheme;\n        } // use light color scheme, if default mode is 'light' | 'system'\n\n\n        return defaultLightColorScheme;\n      }\n\n      return colorScheme;\n    })(); // 2. Create CSS variables and store them in objects (to be generated in stylesheets in the final step)\n\n\n    const {\n      css: rootCss,\n      vars: rootVars,\n      parsedTheme\n    } = cssVarsParser(restThemeProp, {\n      prefix: cssVarPrefix,\n      shouldSkipGeneratingVar\n    }); // 3. Start composing the theme object\n\n    let theme = _extends({}, parsedTheme, {\n      components,\n      colorSchemes,\n      cssVarPrefix,\n      vars: rootVars,\n      getColorSchemeSelector: targetColorScheme => `[${attribute}=\"${targetColorScheme}\"] &`\n    }); // 4. Create color CSS variables and store them in objects (to be generated in stylesheets in the final step)\n    //    The default color scheme stylesheet is constructed to have the least CSS specificity.\n    //    The other color schemes uses selector, default as data attribute, to increase the CSS specificity so that they can override the default color scheme stylesheet.\n\n\n    const defaultColorSchemeStyleSheet = {};\n    const otherColorSchemesStyleSheet = {};\n    Object.entries(colorSchemes).forEach(_ref2 => {\n      let [key, scheme] = _ref2;\n      const {\n        css,\n        vars,\n        parsedTheme: parsedScheme\n      } = cssVarsParser(scheme, {\n        prefix: cssVarPrefix,\n        shouldSkipGeneratingVar\n      });\n      theme.vars = deepmerge(theme.vars, vars);\n\n      if (key === calculatedColorScheme) {\n        // 4.1 Merge the selected color scheme to the theme\n        theme = _extends({}, theme, parsedScheme);\n\n        if (theme.palette) {\n          theme.palette.colorScheme = key;\n        }\n      }\n\n      const resolvedDefaultColorScheme = (() => {\n        if (typeof defaultColorScheme === 'string') {\n          return defaultColorScheme;\n        }\n\n        if (defaultMode === 'dark') {\n          return defaultColorScheme.dark;\n        }\n\n        return defaultColorScheme.light;\n      })();\n\n      if (key === resolvedDefaultColorScheme) {\n        if (excludeVariablesFromRoot) {\n          const excludedVariables = {};\n          excludeVariablesFromRoot(cssVarPrefix).forEach(cssVar => {\n            excludedVariables[cssVar] = css[cssVar];\n            delete css[cssVar];\n          });\n          defaultColorSchemeStyleSheet[`[${attribute}=\"${key}\"]`] = excludedVariables;\n        }\n\n        defaultColorSchemeStyleSheet[`${colorSchemeSelector}, [${attribute}=\"${key}\"]`] = css;\n      } else {\n        otherColorSchemesStyleSheet[`${colorSchemeSelector === ':root' ? '' : colorSchemeSelector}[${attribute}=\"${key}\"]`] = css;\n      }\n    }); // 5. Declaring effects\n    // 5.1 Updates the selector value to use the current color scheme which tells CSS to use the proper stylesheet.\n\n    React.useEffect(() => {\n      if (colorScheme && colorSchemeNode) {\n        // attaches attribute to <html> because the css variables are attached to :root (html)\n        colorSchemeNode.setAttribute(attribute, colorScheme);\n      }\n    }, [colorScheme, attribute, colorSchemeNode]); // 5.2 Remove the CSS transition when color scheme changes to create instant experience.\n    // credit: https://github.com/pacocoursey/next-themes/blob/b5c2bad50de2d61ad7b52a9c5cdc801a78507d7a/index.tsx#L313\n\n    React.useEffect(() => {\n      let timer;\n\n      if (disableTransitionOnChange && hasMounted.current && documentNode) {\n        const css = documentNode.createElement('style');\n        css.appendChild(documentNode.createTextNode(DISABLE_CSS_TRANSITION));\n        documentNode.head.appendChild(css); // Force browser repaint\n\n        (() => window.getComputedStyle(documentNode.body))();\n\n        timer = setTimeout(() => {\n          documentNode.head.removeChild(css);\n        }, 1);\n      }\n\n      return () => {\n        clearTimeout(timer);\n      };\n    }, [colorScheme, disableTransitionOnChange, documentNode]);\n    React.useEffect(() => {\n      hasMounted.current = true;\n      return () => {\n        hasMounted.current = false;\n      };\n    }, []);\n    const contextValue = React.useMemo(() => ({\n      mode,\n      systemMode,\n      setMode,\n      lightColorScheme,\n      darkColorScheme,\n      colorScheme,\n      setColorScheme,\n      allColorSchemes\n    }), [allColorSchemes, colorScheme, darkColorScheme, lightColorScheme, mode, setColorScheme, setMode, systemMode]);\n    return /*#__PURE__*/_jsxs(ColorSchemeContext.Provider, {\n      value: contextValue,\n      children: [/*#__PURE__*/_jsx(GlobalStyles, {\n        styles: {\n          [colorSchemeSelector]: rootCss\n        }\n      }), /*#__PURE__*/_jsx(GlobalStyles, {\n        styles: defaultColorSchemeStyleSheet\n      }), /*#__PURE__*/_jsx(GlobalStyles, {\n        styles: otherColorSchemesStyleSheet\n      }), /*#__PURE__*/_jsx(ThemeProvider, {\n        theme: resolveTheme ? resolveTheme(theme) : theme,\n        children: children\n      })]\n    });\n  }\n\n  process.env.NODE_ENV !== \"production\" ? CssVarsProvider.propTypes = {\n    /**\r\n     * The body attribute name to attach colorScheme.\r\n     */\n    attribute: PropTypes.string,\n\n    /**\r\n     * The component tree.\r\n     */\n    children: PropTypes.node,\n\n    /**\r\n     * The node used to attach the color-scheme attribute\r\n     */\n    colorSchemeNode: PropTypes.any,\n\n    /**\r\n     * The CSS selector for attaching the generated custom properties\r\n     */\n    colorSchemeSelector: PropTypes.string,\n\n    /**\r\n     * localStorage key used to store `colorScheme`\r\n     */\n    colorSchemeStorageKey: PropTypes.string,\n\n    /**\r\n     * The initial color scheme used.\r\n     */\n    defaultColorScheme: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n\n    /**\r\n     * The initial mode used.\r\n     */\n    defaultMode: PropTypes.string,\n\n    /**\r\n     * Disable CSS transitions when switching between modes or color schemes\r\n     */\n    disableTransitionOnChange: PropTypes.bool,\n\n    /**\r\n     * The document to attach the attribute to\r\n     */\n    documentNode: PropTypes.any,\n\n    /**\r\n     * The key in the local storage used to store current color scheme.\r\n     */\n    modeStorageKey: PropTypes.string,\n\n    /**\r\n     * A function to determine if the key, value should be attached as CSS Variable\r\n     */\n    shouldSkipGeneratingVar: PropTypes.func,\n\n    /**\r\n     * The window that attaches the 'storage' event listener\r\n     * @default window\r\n     */\n    storageWindow: PropTypes.any,\n\n    /**\r\n     * The calculated theme object that will be passed through context.\r\n     */\n    theme: PropTypes.object\n  } : void 0;\n  const defaultLightColorScheme = typeof designSystemColorScheme === 'string' ? designSystemColorScheme : designSystemColorScheme.light;\n  const defaultDarkColorScheme = typeof designSystemColorScheme === 'string' ? designSystemColorScheme : designSystemColorScheme.dark;\n\n  const getInitColorSchemeScript = params => systemGetInitColorSchemeScript(_extends({\n    attribute: defaultAttribute,\n    colorSchemeStorageKey: defaultColorSchemeStorageKey,\n    defaultMode: designSystemMode,\n    defaultLightColorScheme,\n    defaultDarkColorScheme,\n    modeStorageKey: defaultModeStorageKey\n  }, params));\n\n  return {\n    CssVarsProvider,\n    useColorScheme,\n    getInitColorSchemeScript\n  };\n}","map":{"version":3,"names":["_extends","_objectWithoutPropertiesLoose","formatMuiErrorMessage","_formatMuiErrorMessage","_excluded","React","PropTypes","deepmerge","GlobalStyles","cssVarsParser","ThemeProvider","systemGetInitColorSchemeScript","DEFAULT_ATTRIBUTE","DEFAULT_COLOR_SCHEME_STORAGE_KEY","DEFAULT_MODE_STORAGE_KEY","useCurrentColorScheme","jsx","_jsx","jsxs","_jsxs","DISABLE_CSS_TRANSITION","createCssVarsProvider","options","theme","defaultTheme","attribute","defaultAttribute","modeStorageKey","defaultModeStorageKey","colorSchemeStorageKey","defaultColorSchemeStorageKey","defaultMode","designSystemMode","defaultColorScheme","designSystemColorScheme","disableTransitionOnChange","designSystemTransitionOnChange","shouldSkipGeneratingVar","designSystemShouldSkipGeneratingVar","resolveTheme","excludeVariablesFromRoot","colorSchemes","light","dark","console","error","ColorSchemeContext","createContext","undefined","useColorScheme","value","useContext","Error","process","env","NODE_ENV","CssVarsProvider","children","themeProp","storageWindow","window","documentNode","document","colorSchemeNode","documentElement","colorSchemeSelector","hasMounted","useRef","components","cssVarPrefix","restThemeProp","allColorSchemes","Object","keys","defaultLightColorScheme","defaultDarkColorScheme","mode","setMode","systemMode","lightColorScheme","darkColorScheme","colorScheme","setColorScheme","supportedColorSchemes","calculatedMode","calculatedColorScheme","css","rootCss","vars","rootVars","parsedTheme","prefix","getColorSchemeSelector","targetColorScheme","defaultColorSchemeStyleSheet","otherColorSchemesStyleSheet","entries","forEach","key","scheme","parsedScheme","palette","resolvedDefaultColorScheme","excludedVariables","cssVar","useEffect","setAttribute","timer","current","createElement","appendChild","createTextNode","head","getComputedStyle","body","setTimeout","removeChild","clearTimeout","contextValue","useMemo","Provider","styles","propTypes","string","node","any","oneOfType","object","bool","func","getInitColorSchemeScript","params"],"sources":["E:/project/react/react-todo/node_modules/@mui/system/esm/cssVars/createCssVarsProvider.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\r\nimport { formatMuiErrorMessage as _formatMuiErrorMessage } from \"@mui/utils\";\r\nconst _excluded = [\"colorSchemes\", \"components\", \"cssVarPrefix\"];\r\nimport * as React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { deepmerge } from '@mui/utils';\r\nimport { GlobalStyles } from '@mui/styled-engine';\r\nimport cssVarsParser from './cssVarsParser';\r\nimport ThemeProvider from '../ThemeProvider';\r\nimport systemGetInitColorSchemeScript, { DEFAULT_ATTRIBUTE, DEFAULT_COLOR_SCHEME_STORAGE_KEY, DEFAULT_MODE_STORAGE_KEY } from './getInitColorSchemeScript';\r\nimport useCurrentColorScheme from './useCurrentColorScheme';\r\nimport { jsx as _jsx } from \"react/jsx-runtime\";\r\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\r\nexport const DISABLE_CSS_TRANSITION = '*{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}';\r\nexport default function createCssVarsProvider(options) {\r\n  const {\r\n    theme: defaultTheme = {},\r\n    attribute: defaultAttribute = DEFAULT_ATTRIBUTE,\r\n    modeStorageKey: defaultModeStorageKey = DEFAULT_MODE_STORAGE_KEY,\r\n    colorSchemeStorageKey: defaultColorSchemeStorageKey = DEFAULT_COLOR_SCHEME_STORAGE_KEY,\r\n    defaultMode: designSystemMode = 'light',\r\n    defaultColorScheme: designSystemColorScheme,\r\n    disableTransitionOnChange: designSystemTransitionOnChange = false,\r\n    shouldSkipGeneratingVar: designSystemShouldSkipGeneratingVar,\r\n    resolveTheme,\r\n    excludeVariablesFromRoot\r\n  } = options;\r\n\r\n  if (!defaultTheme.colorSchemes || typeof designSystemColorScheme === 'string' && !defaultTheme.colorSchemes[designSystemColorScheme] || typeof designSystemColorScheme === 'object' && !defaultTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.light] || typeof designSystemColorScheme === 'object' && !defaultTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.dark]) {\r\n    console.error(`MUI: \\`${designSystemColorScheme}\\` does not exist in \\`theme.colorSchemes\\`.`);\r\n  }\r\n\r\n  const ColorSchemeContext = /*#__PURE__*/React.createContext(undefined);\r\n\r\n  const useColorScheme = () => {\r\n    const value = React.useContext(ColorSchemeContext);\r\n\r\n    if (!value) {\r\n      throw new Error(process.env.NODE_ENV !== \"production\" ? `MUI: \\`useColorScheme\\` must be called under <CssVarsProvider />` : _formatMuiErrorMessage(19));\r\n    }\r\n\r\n    return value;\r\n  };\r\n\r\n  function CssVarsProvider({\r\n    children,\r\n    theme: themeProp = defaultTheme,\r\n    modeStorageKey = defaultModeStorageKey,\r\n    colorSchemeStorageKey = defaultColorSchemeStorageKey,\r\n    attribute = defaultAttribute,\r\n    defaultMode = designSystemMode,\r\n    defaultColorScheme = designSystemColorScheme,\r\n    disableTransitionOnChange = designSystemTransitionOnChange,\r\n    storageWindow = typeof window === 'undefined' ? undefined : window,\r\n    documentNode = typeof document === 'undefined' ? undefined : document,\r\n    colorSchemeNode = typeof document === 'undefined' ? undefined : document.documentElement,\r\n    colorSchemeSelector = ':root',\r\n    shouldSkipGeneratingVar = designSystemShouldSkipGeneratingVar\r\n  }) {\r\n    const hasMounted = React.useRef(false);\r\n\r\n    const {\r\n      colorSchemes = {},\r\n      components = {},\r\n      cssVarPrefix\r\n    } = themeProp,\r\n          restThemeProp = _objectWithoutPropertiesLoose(themeProp, _excluded);\r\n\r\n    const allColorSchemes = Object.keys(colorSchemes);\r\n    const defaultLightColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.light;\r\n    const defaultDarkColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.dark; // 1. Get the data about the `mode`, `colorScheme`, and setter functions.\r\n\r\n    const {\r\n      mode,\r\n      setMode,\r\n      systemMode,\r\n      lightColorScheme,\r\n      darkColorScheme,\r\n      colorScheme,\r\n      setColorScheme\r\n    } = useCurrentColorScheme({\r\n      supportedColorSchemes: allColorSchemes,\r\n      defaultLightColorScheme,\r\n      defaultDarkColorScheme,\r\n      modeStorageKey,\r\n      colorSchemeStorageKey,\r\n      defaultMode,\r\n      storageWindow\r\n    });\r\n\r\n    const calculatedMode = (() => {\r\n      if (!mode) {\r\n        // This scope occurs on the server\r\n        if (defaultMode === 'system') {\r\n          return designSystemMode;\r\n        }\r\n\r\n        return defaultMode;\r\n      }\r\n\r\n      return mode;\r\n    })();\r\n\r\n    const calculatedColorScheme = (() => {\r\n      if (!colorScheme) {\r\n        // This scope occurs on the server\r\n        if (calculatedMode === 'dark') {\r\n          return defaultDarkColorScheme;\r\n        } // use light color scheme, if default mode is 'light' | 'system'\r\n\r\n\r\n        return defaultLightColorScheme;\r\n      }\r\n\r\n      return colorScheme;\r\n    })(); // 2. Create CSS variables and store them in objects (to be generated in stylesheets in the final step)\r\n\r\n\r\n    const {\r\n      css: rootCss,\r\n      vars: rootVars,\r\n      parsedTheme\r\n    } = cssVarsParser(restThemeProp, {\r\n      prefix: cssVarPrefix,\r\n      shouldSkipGeneratingVar\r\n    }); // 3. Start composing the theme object\r\n\r\n    let theme = _extends({}, parsedTheme, {\r\n      components,\r\n      colorSchemes,\r\n      cssVarPrefix,\r\n      vars: rootVars,\r\n      getColorSchemeSelector: targetColorScheme => `[${attribute}=\"${targetColorScheme}\"] &`\r\n    }); // 4. Create color CSS variables and store them in objects (to be generated in stylesheets in the final step)\r\n    //    The default color scheme stylesheet is constructed to have the least CSS specificity.\r\n    //    The other color schemes uses selector, default as data attribute, to increase the CSS specificity so that they can override the default color scheme stylesheet.\r\n\r\n\r\n    const defaultColorSchemeStyleSheet = {};\r\n    const otherColorSchemesStyleSheet = {};\r\n    Object.entries(colorSchemes).forEach(([key, scheme]) => {\r\n      const {\r\n        css,\r\n        vars,\r\n        parsedTheme: parsedScheme\r\n      } = cssVarsParser(scheme, {\r\n        prefix: cssVarPrefix,\r\n        shouldSkipGeneratingVar\r\n      });\r\n      theme.vars = deepmerge(theme.vars, vars);\r\n\r\n      if (key === calculatedColorScheme) {\r\n        // 4.1 Merge the selected color scheme to the theme\r\n        theme = _extends({}, theme, parsedScheme);\r\n\r\n        if (theme.palette) {\r\n          theme.palette.colorScheme = key;\r\n        }\r\n      }\r\n\r\n      const resolvedDefaultColorScheme = (() => {\r\n        if (typeof defaultColorScheme === 'string') {\r\n          return defaultColorScheme;\r\n        }\r\n\r\n        if (defaultMode === 'dark') {\r\n          return defaultColorScheme.dark;\r\n        }\r\n\r\n        return defaultColorScheme.light;\r\n      })();\r\n\r\n      if (key === resolvedDefaultColorScheme) {\r\n        if (excludeVariablesFromRoot) {\r\n          const excludedVariables = {};\r\n          excludeVariablesFromRoot(cssVarPrefix).forEach(cssVar => {\r\n            excludedVariables[cssVar] = css[cssVar];\r\n            delete css[cssVar];\r\n          });\r\n          defaultColorSchemeStyleSheet[`[${attribute}=\"${key}\"]`] = excludedVariables;\r\n        }\r\n\r\n        defaultColorSchemeStyleSheet[`${colorSchemeSelector}, [${attribute}=\"${key}\"]`] = css;\r\n      } else {\r\n        otherColorSchemesStyleSheet[`${colorSchemeSelector === ':root' ? '' : colorSchemeSelector}[${attribute}=\"${key}\"]`] = css;\r\n      }\r\n    }); // 5. Declaring effects\r\n    // 5.1 Updates the selector value to use the current color scheme which tells CSS to use the proper stylesheet.\r\n\r\n    React.useEffect(() => {\r\n      if (colorScheme && colorSchemeNode) {\r\n        // attaches attribute to <html> because the css variables are attached to :root (html)\r\n        colorSchemeNode.setAttribute(attribute, colorScheme);\r\n      }\r\n    }, [colorScheme, attribute, colorSchemeNode]); // 5.2 Remove the CSS transition when color scheme changes to create instant experience.\r\n    // credit: https://github.com/pacocoursey/next-themes/blob/b5c2bad50de2d61ad7b52a9c5cdc801a78507d7a/index.tsx#L313\r\n\r\n    React.useEffect(() => {\r\n      let timer;\r\n\r\n      if (disableTransitionOnChange && hasMounted.current && documentNode) {\r\n        const css = documentNode.createElement('style');\r\n        css.appendChild(documentNode.createTextNode(DISABLE_CSS_TRANSITION));\r\n        documentNode.head.appendChild(css); // Force browser repaint\r\n\r\n        (() => window.getComputedStyle(documentNode.body))();\r\n\r\n        timer = setTimeout(() => {\r\n          documentNode.head.removeChild(css);\r\n        }, 1);\r\n      }\r\n\r\n      return () => {\r\n        clearTimeout(timer);\r\n      };\r\n    }, [colorScheme, disableTransitionOnChange, documentNode]);\r\n    React.useEffect(() => {\r\n      hasMounted.current = true;\r\n      return () => {\r\n        hasMounted.current = false;\r\n      };\r\n    }, []);\r\n    const contextValue = React.useMemo(() => ({\r\n      mode,\r\n      systemMode,\r\n      setMode,\r\n      lightColorScheme,\r\n      darkColorScheme,\r\n      colorScheme,\r\n      setColorScheme,\r\n      allColorSchemes\r\n    }), [allColorSchemes, colorScheme, darkColorScheme, lightColorScheme, mode, setColorScheme, setMode, systemMode]);\r\n    return /*#__PURE__*/_jsxs(ColorSchemeContext.Provider, {\r\n      value: contextValue,\r\n      children: [/*#__PURE__*/_jsx(GlobalStyles, {\r\n        styles: {\r\n          [colorSchemeSelector]: rootCss\r\n        }\r\n      }), /*#__PURE__*/_jsx(GlobalStyles, {\r\n        styles: defaultColorSchemeStyleSheet\r\n      }), /*#__PURE__*/_jsx(GlobalStyles, {\r\n        styles: otherColorSchemesStyleSheet\r\n      }), /*#__PURE__*/_jsx(ThemeProvider, {\r\n        theme: resolveTheme ? resolveTheme(theme) : theme,\r\n        children: children\r\n      })]\r\n    });\r\n  }\r\n\r\n  process.env.NODE_ENV !== \"production\" ? CssVarsProvider.propTypes = {\r\n    /**\r\n     * The body attribute name to attach colorScheme.\r\n     */\r\n    attribute: PropTypes.string,\r\n\r\n    /**\r\n     * The component tree.\r\n     */\r\n    children: PropTypes.node,\r\n\r\n    /**\r\n     * The node used to attach the color-scheme attribute\r\n     */\r\n    colorSchemeNode: PropTypes.any,\r\n\r\n    /**\r\n     * The CSS selector for attaching the generated custom properties\r\n     */\r\n    colorSchemeSelector: PropTypes.string,\r\n\r\n    /**\r\n     * localStorage key used to store `colorScheme`\r\n     */\r\n    colorSchemeStorageKey: PropTypes.string,\r\n\r\n    /**\r\n     * The initial color scheme used.\r\n     */\r\n    defaultColorScheme: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\r\n\r\n    /**\r\n     * The initial mode used.\r\n     */\r\n    defaultMode: PropTypes.string,\r\n\r\n    /**\r\n     * Disable CSS transitions when switching between modes or color schemes\r\n     */\r\n    disableTransitionOnChange: PropTypes.bool,\r\n\r\n    /**\r\n     * The document to attach the attribute to\r\n     */\r\n    documentNode: PropTypes.any,\r\n\r\n    /**\r\n     * The key in the local storage used to store current color scheme.\r\n     */\r\n    modeStorageKey: PropTypes.string,\r\n\r\n    /**\r\n     * A function to determine if the key, value should be attached as CSS Variable\r\n     */\r\n    shouldSkipGeneratingVar: PropTypes.func,\r\n\r\n    /**\r\n     * The window that attaches the 'storage' event listener\r\n     * @default window\r\n     */\r\n    storageWindow: PropTypes.any,\r\n\r\n    /**\r\n     * The calculated theme object that will be passed through context.\r\n     */\r\n    theme: PropTypes.object\r\n  } : void 0;\r\n  const defaultLightColorScheme = typeof designSystemColorScheme === 'string' ? designSystemColorScheme : designSystemColorScheme.light;\r\n  const defaultDarkColorScheme = typeof designSystemColorScheme === 'string' ? designSystemColorScheme : designSystemColorScheme.dark;\r\n\r\n  const getInitColorSchemeScript = params => systemGetInitColorSchemeScript(_extends({\r\n    attribute: defaultAttribute,\r\n    colorSchemeStorageKey: defaultColorSchemeStorageKey,\r\n    defaultMode: designSystemMode,\r\n    defaultLightColorScheme,\r\n    defaultDarkColorScheme,\r\n    modeStorageKey: defaultModeStorageKey\r\n  }, params));\r\n\r\n  return {\r\n    CssVarsProvider,\r\n    useColorScheme,\r\n    getInitColorSchemeScript\r\n  };\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}